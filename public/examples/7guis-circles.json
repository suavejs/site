{
  "title": "Circle Drawer",
  "files": [
    {
      "name": "App.svelte",
      "source": "<!--\nhttps://eugenkiss.github.io/7guis/tasks#circle\n\nClick on the canvas to draw a circle. Click on a circle\nto select it. Right-click on the canvas to adjust the\nradius of the selected circle.\n-->\n\n<script>\n\tlet i = 0;\n\tlet undoStack = [[]];\n\tlet circles = [];\n\tlet selected;\n\tlet adjusting = false;\n\tlet adjusted = false;\n\n\tfunction handleClick(event) {\n\t\tif (adjusting) {\n\t\t\tadjusting = false;\n\n\t\t\t// if circle was adjusted,\n\t\t\t// push to the stack\n\t\t\tif (adjusted) push();\n\t\t\treturn;\n\t\t}\n\n\t\tconst circle = {\n\t\t\tcx: event.clientX,\n\t\t\tcy: event.clientY,\n\t\t\tr: 50\n\t\t};\n\n\t\tcircles = circles.concat(circle);\n\t\tselected = circle;\n\n\t\tpush();\n\t}\n\n\tfunction adjust(event) {\n\t\tselected.r = +event.target.value;\n\t\tcircles = circles;\n\t\tadjusted = true;\n\t}\n\n\tfunction select(circle, event) {\n\t\tif (!adjusting) {\n\t\t\tevent.stopPropagation();\n\t\t\tselected = circle;\n\t\t}\n\t}\n\n\tfunction push() {\n\t\tconst newUndoStack = undoStack.slice(0, ++i);\n\t\tnewUndoStack.push(clone(circles));\n\t\tundoStack = newUndoStack;\n\t}\n\n\tfunction travel(d) {\n\t\tcircles = clone(undoStack[i += d]);\n\t\tadjusting = false;\n\t}\n\n\tfunction clone(circles) {\n\t\treturn circles.map(({ cx, cy, r }) => ({ cx, cy, r }));\n\t}\n</script>\n\n<style>\n\t.controls {\n\t\tposition: absolute;\n\t\twidth: 100%;\n\t\ttext-align: center;\n\t}\n\n\tsvg {\n\t\tbackground-color: #eee;\n\t\twidth: 100%;\n\t\theight: 100%;\n\t}\n\n\tcircle {\n\t\tstroke: black;\n\t}\n\n\t.adjuster {\n\t\tposition: absolute;\n\t\twidth: 80%;\n\t\ttop: 50%;\n\t\tleft: 50%;\n\t\ttransform: translate(-50%,-50%);\n\t\tpadding: 1em;\n\t\ttext-align: center;\n\t\tbackground-color: rgba(255,255,255,0.7);\n\t\tborder-radius: 4px;\n\t}\n\n\tinput[type='range'] {\n\t\twidth: 100%;\n\t}\n</style>\n\n<div class=\"controls\">\n\t<button on:click=\"{() => travel(-1)}\" disabled=\"{i === 0}\">undo</button>\n\t<button on:click=\"{() => travel(+1)}\" disabled=\"{i === undoStack.length -1}\">redo</button>\n</div>\n\n<svg on:click={handleClick} >\n\t{#each circles as circle}\n\t\t<circle cx={circle.cx} cy={circle.cy} r={circle.r}\n\t\t\ton:click=\"{event => select(circle, event)}\"\n\t\t\ton:contextmenu|stopPropagation|preventDefault=\"{() => {\n\t\t\t\tadjusting = !adjusting;\n\t\t\t\tif (adjusting) selected = circle;\n\t\t\t}}\"\n\t\t\tfill=\"{circle === selected ? '#ccc': 'white'}\"\n\t\t/>\n\t{/each}\n</svg>\n\n{#if adjusting}\n\t<div class=\"adjuster\">\n\t\t<p>adjust diameter of circle at {selected.cx}, {selected.cy}</p>\n\t\t<input type=\"range\" value={selected.r} on:input={adjust}>\n\t</div>\n{/if}"
    }
  ]
}